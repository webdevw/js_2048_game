{"version":3,"sources":["scripts/main.js"],"names":["tableGame","document","querySelector","rows","columnLength","length","button","score","messageStart","messageWin","messageLose","cells","querySelectorAll","winValue","table","starting","onChanges","oldMatrix","newMatrix","answer","i","some","elem","index","transpose","original","copy","j","undefined","moveCells","matrix","reverse","deepClone","map","removeZeroes","row","filter","num","slide","newRow","addScore","push","copyOut","plusNumber","oldScores","newScores","textContent","addValuesToCells","addInRandomCell","percent","emptyCellsIndexes","value","Math","round","random","arrLength","randomCeil","numbLast","slice","obj","clObj","Object","checkOnWin","classList","remove","changeStyleCells","cellsTable","forEach","cell","className","toggle","addEventListener","action","startGame","add","contains","toggleBtn","text","e","includes","key","link","rotating","arrowMove","vertical","checkTable","down","up","right","left","every","el"],"mappings":"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","file":"main.9e167fb0.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst tableGame = document.querySelector('.game-field');\nconst rows = tableGame.rows;\nconst columnLength = tableGame.rows.length;\nconst button = document.querySelector('button');\nconst score = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst cells = document.querySelectorAll('.field-cell');\nconst winValue = 2048;\n\nlet table = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n];\n\nlet starting = false;\n\nbutton.addEventListener('click', action => {\n  function toggleBtn(text = '') {\n    button.textContent = text;\n    button.classList.toggle('start');\n    button.classList.toggle('restart');\n  }\n\n  messageStart.classList.add('hidden');\n  messageWin.classList.toggle('hidden', true);\n  messageLose.classList.toggle('hidden', true);\n\n  function startGame() {\n    starting = true;\n    score.textContent = 0;\n\n    table = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    addInRandomCell(table);\n    addInRandomCell(table);\n    addValuesToCells(table);\n    changeStyleCells(cells);\n  }\n\n  if (button.classList.contains('start')) {\n    toggleBtn('Restart');\n    startGame();\n  } else {\n    startGame();\n  }\n});\n\nfunction onChanges(oldMatrix, newMatrix) {\n  let answer;\n\n  for (let i = 0; i < oldMatrix.length; i++) {\n    answer = oldMatrix[i].some((elem, index) => {\n      return elem !== newMatrix[i][index];\n    });\n\n    if (answer) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\ndocument.addEventListener('keydown', (e) => {\n  const arrayOfKeys = [\n    'ArrowRight',\n    'ArrowLeft',\n    'ArrowDown',\n    'ArrowUp',\n  ];\n\n  if (!arrayOfKeys.includes(e.key) || !starting) {\n    return null;\n  }\n\n  const link = deepClone(table);\n  const rotating = transpose(link);\n\n  function arrowMove(matrix, reverse = false, vertical = false) {\n    table = vertical\n      ? transpose(moveCells(matrix, reverse, true))\n      : moveCells(matrix, reverse, true);\n\n    if (!onChanges(link, table)) {\n      return null;\n    }\n    addInRandomCell(table);\n    addValuesToCells(table);\n    changeStyleCells(cells);\n  }\n\n  switch (e.key) {\n    case 'ArrowRight':\n      arrowMove(link);\n      break;\n    case 'ArrowLeft':\n      arrowMove(link, true);\n      break;\n    case 'ArrowDown':\n      arrowMove(rotating, false, true);\n      break;\n    case 'ArrowUp':\n      arrowMove(rotating, true, true);\n      break;\n  }\n\n  checkOnWin(table);\n\n  for (const row of table) {\n    if (!row.includes(0)) {\n      const checkTable = deepClone(table);\n      const down = transpose(moveCells(rotating, true));\n      const up = transpose(moveCells(rotating, false));\n      const right = moveCells(table, false);\n      const left = moveCells(table, true);\n      const results = [\n        onChanges(checkTable, down),\n        onChanges(checkTable, up),\n        onChanges(checkTable, right),\n        onChanges(checkTable, left),\n      ];\n\n      if (results.every(el => el === false)) {\n        messageLose.classList.remove('hidden');\n        starting = false;\n      }\n    }\n  }\n});\n\nfunction transpose(original) {\n  const copy = [];\n\n  for (let i = 0; i < original.length; ++i) {\n    for (let j = 0; j < original[i].length; ++j) {\n      if (original[i][j] === undefined) {\n        continue;\n      }\n\n      if (copy[j] === undefined) {\n        copy[j] = [];\n      }\n\n      copy[j][i] = original[i][j];\n    }\n  }\n\n  return copy;\n}\n\nfunction moveCells(matrix, reverse = false, original = false) {\n  const copy = !(reverse)\n    ? deepClone(matrix).map(elem => elem.reverse())\n    : deepClone(matrix);\n\n  function removeZeroes(row) {\n    return row.filter(num => num !== 0);\n  }\n\n  function slide(row) {\n    let newRow = removeZeroes(row);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n\n        if (original) {\n          addScore(newRow[i]);\n        }\n      }\n      newRow = removeZeroes(newRow);\n    }\n\n    while (newRow.length < columnLength) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  const copyOut = [];\n\n  for (let j = 0; j < columnLength; j++) {\n    let row = copy[j];\n\n    row = slide(row);\n    copyOut[j] = row;\n  }\n\n  return (!(reverse) ? copyOut.map(elem => elem.reverse()) : copyOut);\n}\n\nfunction addScore(plusNumber) {\n  const oldScores = +score.textContent;\n  const newScores = oldScores + plusNumber;\n\n  score.textContent = newScores;\n}\n\nfunction addValuesToCells(matrix) {\n  for (let i = 0; i < columnLength; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      rows[i].cells[j].textContent = (matrix[i][j] !== 0)\n        ? matrix[i][j]\n        : ' ';\n    }\n  }\n}\n\nfunction addInRandomCell(matrix, percent = 10) {\n  const emptyCellsIndexes = [];\n  const randomNumber = Math.round(Math.random() * 100);\n  const value = randomNumber > percent\n    ? 2\n    : 4;\n\n  for (let i = 0; i < columnLength; i++) {\n    for (let j = 0; j < columnLength; j++) {\n      if (matrix[i][j] === 0) {\n        emptyCellsIndexes.push([i, j]);\n      }\n    }\n  }\n\n  const arrLength = emptyCellsIndexes.length;\n  const randomCeil = Math.round(Math.random() * (arrLength - 1));\n\n  if (arrLength > 0) {\n    const numbLast = +emptyCellsIndexes[randomCeil].slice(1);\n    const numbFirst = +emptyCellsIndexes[randomCeil].slice(0, 1);\n\n    matrix[numbFirst][numbLast] = value;\n  }\n}\n\nfunction deepClone(obj) {\n  const clObj = [];\n\n  for (const i in obj) {\n    if (obj[i] instanceof Object) {\n      clObj[i] = deepClone(obj[i]);\n      continue;\n    }\n    clObj[i] = obj[i];\n  }\n\n  return clObj;\n}\n\nfunction checkOnWin(matrix) {\n  for (const row of matrix) {\n    for (const cell of row) {\n      if (cell === winValue) {\n        messageWin.classList.remove('hidden');\n      }\n    }\n  }\n}\n\nfunction changeStyleCells(cellsTable) {\n  const arrayOfCells = [...cellsTable];\n\n  arrayOfCells.forEach((cell) => {\n    cell.className = `field-cell`;\n\n    const value = cell.textContent;\n\n    if (value >= 2) {\n      cell.classList.toggle(`field-cell--${value}`, true);\n    }\n  });\n}\n"]}